/**
 * Rule: no-nesting
 * Avoid nesting your promises.
 */

'use strict'

const getDocsUrl = require('./lib/get-docs-url')
const hasPromiseCallback = require('./lib/has-promise-callback')
const isInsidePromise = require('./lib/is-inside-promise')

module.exports = {
  meta: {
    type: 'suggestion',
    docs: {
      url: getDocsUrl('no-nesting'),
    },
    schema: [],
  },
  create(context) {
    /**
     * Array of callback function scopes.
     * Scopes are in order closest to the current node.
     * @type {import('eslint').Scope.Scope[]}
     */
    const callbackScopes = []

    /**
     * @param {import('eslint').Scope.Scope} scope
     * @returns {Iterable<import('eslint').Scope.Reference>}
     */
    function* iterateDefinedReferences(scope) {
      for (const variable of scope.variables) {
        for (const reference of variable.references) {
          yield reference